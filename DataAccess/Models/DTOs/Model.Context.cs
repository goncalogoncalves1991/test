//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccess.Models.DTOs
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class EventCommitEntities : DbContext
    {
        public EventCommitEntities()
            : base("name=EventCommitEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<community> community { get; set; }
        public virtual DbSet<@event> @event { get; set; }
        public virtual DbSet<eventSubscribers> eventSubscribers { get; set; }
        public virtual DbSet<inboxMessage> inboxMessage { get; set; }
        public virtual DbSet<notice> notice { get; set; }
        public virtual DbSet<question> question { get; set; }
        public virtual DbSet<session> session { get; set; }
        public virtual DbSet<sponsor> sponsor { get; set; }
        public virtual DbSet<tag> tag { get; set; }
        public virtual DbSet<userInfo> userInfo { get; set; }
        public virtual DbSet<comment> comment { get; set; }
        public virtual DbSet<CommunitySocialNetwork> CommunitySocialNetwork { get; set; }
        public virtual DbSet<surveyQuestion> surveyQuestion { get; set; }
        public virtual DbSet<surveyAnswer> surveyAnswer { get; set; }
        public virtual DbSet<surveyChoice> surveyChoice { get; set; }
        public virtual DbSet<surveyChoiceAnswer> surveyChoiceAnswer { get; set; }
        public virtual DbSet<surveyTextAnswer> surveyTextAnswer { get; set; }
    
        public virtual int insert_community(string name, string local, string description, Nullable<System.DateTime> foundationDate, string avatar, Nullable<int> userCreator, ObjectParameter id)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var localParameter = local != null ?
                new ObjectParameter("local", local) :
                new ObjectParameter("local", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var foundationDateParameter = foundationDate.HasValue ?
                new ObjectParameter("foundationDate", foundationDate) :
                new ObjectParameter("foundationDate", typeof(System.DateTime));
    
            var avatarParameter = avatar != null ?
                new ObjectParameter("avatar", avatar) :
                new ObjectParameter("avatar", typeof(string));
    
            var userCreatorParameter = userCreator.HasValue ?
                new ObjectParameter("userCreator", userCreator) :
                new ObjectParameter("userCreator", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insert_community", nameParameter, localParameter, descriptionParameter, foundationDateParameter, avatarParameter, userCreatorParameter, id);
        }
    
        public virtual int update_community(Nullable<int> id, Nullable<int> userId, string local, string description, Nullable<System.DateTime> foundationDate, string avatar)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var localParameter = local != null ?
                new ObjectParameter("local", local) :
                new ObjectParameter("local", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var foundationDateParameter = foundationDate.HasValue ?
                new ObjectParameter("foundationDate", foundationDate) :
                new ObjectParameter("foundationDate", typeof(System.DateTime));
    
            var avatarParameter = avatar != null ?
                new ObjectParameter("avatar", avatar) :
                new ObjectParameter("avatar", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("update_community", idParameter, userIdParameter, localParameter, descriptionParameter, foundationDateParameter, avatarParameter);
        }
    
        public virtual int delete_community(Nullable<int> id, Nullable<int> userId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("delete_community", idParameter, userIdParameter);
        }
    
        public virtual int insert_community_admin(Nullable<int> id, Nullable<int> userId, Nullable<int> adminId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            var adminIdParameter = adminId.HasValue ?
                new ObjectParameter("adminId", adminId) :
                new ObjectParameter("adminId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insert_community_admin", idParameter, userIdParameter, adminIdParameter);
        }
    
        public virtual int insert_community_member(Nullable<int> id, Nullable<int> userId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insert_community_member", idParameter, userIdParameter);
        }
    
        public virtual int insert_question_Liker(string userId, Nullable<int> questionId)
        {
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("questionId", questionId) :
                new ObjectParameter("questionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insert_question_Liker", userIdParameter, questionIdParameter);
        }
    }
}
